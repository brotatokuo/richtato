"""
Django settings for richtato project.

Generated by 'django-admin startproject' using Django 5.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
from urllib.parse import urlparse

from colorama import Fore
from dotenv import load_dotenv
from loguru import logger

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-jhuu7vjafr)5v-h6pojy=@glgi&z#32y*!jxa4_#*bq6w%r2q="

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True


ALLOWED_HOSTS = ["localhost", "127.0.0.1", "richtato.onrender.com"]

CSRF_TRUSTED_ORIGINS = [
    "https://richtato.onrender.com",
]

# Application definition

INSTALLED_APPS = [
    "apps.richtato_user",
    "apps.account",
    "apps.budget",
    "apps.income",
    "apps.expense",
    "apps.settings",
    "django.contrib.humanize",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "apps.settings.self_ping_middleware.SelfPingMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "richtato.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "pages"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]


def log_deploy_stage_message(
    deploy_stage: str, color: str, icon: str, message: str, emoji: str
) -> None:
    logger.info(
        f"{color}{'=' * 20} {emoji} DEPLOY_STAGE: {deploy_stage.upper()} {emoji} {'=' * 20}{Fore.RESET}\n"
        f"{color}{message}{Fore.RESET}"
    )


# Function to print deploy stage in a more friendly and clear way
def print_deploy_stage(deploy_stage: str) -> None:
    match deploy_stage:
        case "LOCAL":
            log_deploy_stage_message(
                deploy_stage,
                Fore.CYAN,
                "ðŸŒŸðŸš€",
                f">>> The current environment is {deploy_stage.upper()}! All systems go! ðŸ’»",
                "ðŸš€",
            )

        case "DEV":
            log_deploy_stage_message(
                deploy_stage,
                Fore.GREEN,
                "ðŸŒ±ðŸŽ‰",
                ">>> You're in development mode! Feel free to experiment! ðŸŒŸ",
                "ðŸŽ‰",
            )

        case "PROD":
            logger.warning(
                f"{Fore.RED}{'=' * 20} ðŸš¨ðŸš¨ WARNING: DEPLOY_STAGE is {deploy_stage.upper()} ðŸš¨ðŸš¨ {'=' * 20}\n"
                f"{Fore.RED}>>> You are running in PRODUCTION! <<<{Fore.RESET}"
            )


# Load environment variables and set DEPLOY_STAGE
def configure_database_for_stage(deploy_stage: str) -> dict:
    match deploy_stage:
        case "LOCAL":
            return {
                "default": {
                    "ENGINE": "django.db.backends.sqlite3",
                    "NAME": BASE_DIR / "db.sqlite3",
                }
            }
        case "PROD" | "DEV":
            PG_DB_URL = f"{deploy_stage}_DATABASE_URL"
            db_url = os.getenv(PG_DB_URL)
            tmpPostgres = urlparse(db_url)
            db_name = tmpPostgres.path.lstrip("/")
            return {
                "default": {
                    "ENGINE": "django.db.backends.postgresql",
                    "NAME": db_name,
                    "USER": tmpPostgres.username,
                    "PASSWORD": tmpPostgres.password,
                    "HOST": tmpPostgres.hostname,
                    "PORT": tmpPostgres.port or 5432,
                }
            }
        case _:
            raise ValueError(f"Invalid DEPLOY_STAGE: {deploy_stage}")


load_dotenv()
DEPLOY_STAGE = os.getenv("DEPLOY_STAGE") or "DEV".upper()
DATABASES = configure_database_for_stage(DEPLOY_STAGE)
print_deploy_stage(DEPLOY_STAGE)
os.environ["DEPLOY_STAGE"] = DEPLOY_STAGE


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators
AUTH_USER_MODEL = "richtato_user.User"

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "/static/"

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
